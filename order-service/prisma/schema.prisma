// order-service/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Product {
  id       String  @id
  name     String
  sku      String
  imageUrl String?
  @@map("denormalized_products")
}
model DenormalizedUser {
  id           String  @id
  name         String
  profileImage String?
  email        String

  orders Order[] // <-- ADD THIS RELATIONSHIP

  @@map("denormalized_users")
}
enum OrderStatus {
  PENDING
  PAID
  FAILED
  SHIPPED
  DELIVERED
  CANCELLED
}
enum PaymentMethod {
  CREDIT_CARD
  CASH_ON_DELIVERY
}
model Order {
  id              String        @id @default(uuid())
  userId          String?
  guestEmail      String?
  guestName       String?
  phone           String?
  status          OrderStatus   @default(PENDING)
  paymentMethod   PaymentMethod
  totalAmount     Decimal       @db.Decimal(10, 2)
  shippingAddress Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  paymentTransactionId String?       @unique
  paymentFailureReason String?

  items           OrderItem[]
  user            DenormalizedUser? @relation(fields: [userId], references: [id]) // <-- ADD THIS RELATIONSHIP

  @@index([userId])
  @@index([guestEmail])
  @@index([phone])
}
model OrderItem {
  id                 String  @id @default(uuid())
  orderId            String
  productId          String
  variantId          String
  productName        String
  variantAttributes  Json
  sku                String
  imageUrl           String?
  priceAtTimeOfOrder Decimal @db.Decimal(10, 2)
  costPriceAtTimeOfOrder Decimal? @db.Decimal(10, 2)
  quantity           Int
  order              Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}