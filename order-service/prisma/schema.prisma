// order-service/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Product {
  id       String  @id
  name     Json
  sku      String
  imageUrl String?
  @@map("denormalized_products")
}
model DenormalizedUser {
  id           String  @id
  name         String
  profileImage String?
  email        String
  orders Order[]
  @@map("denormalized_users")
}
enum OrderStatus {
  PENDING
  PAID
  FAILED
  SHIPPED
  DELIVERED
  CANCELLED
}
enum ReturnRequestStatus {
  PENDING_APPROVAL
  AWAITING_CUSTOMER_RESPONSE
  APPROVED
  REJECTED
  SHIPPED_BY_CUSTOMER
  RECEIVED
  COMPLETED
  CANCELLED
}
enum PaymentMethod {
  CREDIT_CARD
  CASH_ON_DELIVERY
}
model Order {
  id              String        @id @default(uuid())
  userId          String?
  guestEmail      String?
  guestName       String?
  phone           String?
  status          OrderStatus   @default(PENDING)
  paymentMethod   PaymentMethod
  shippingAddress Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  paymentTransactionId String?       @unique
  paymentFailureReason String?
  guest_token     String?       @unique

  totalAmount     Decimal       @db.Decimal(10, 2)
  displayCurrency String
  exchangeRateAtPurchase Decimal @db.Decimal(12, 6)
  displayTotalAmount Decimal     @db.Decimal(10, 2)

  items           OrderItem[]
  user            DenormalizedUser? @relation(fields: [userId], references: [id])
  returnRequests  ReturnRequest[]

  @@index([userId])
  @@index([guestEmail])
  @@index([phone])
}
model OrderItem {
  id                 String  @id @default(uuid())
  orderId            String
  productId          String
  variantId          String
  productName        Json
  variantAttributes  Json
  sku                String
  imageUrl           String?
  priceAtTimeOfOrder Decimal @db.Decimal(10, 2)
  costPriceAtTimeOfOrder Decimal? @db.Decimal(10, 2)
  quantity           Int
  order              Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  returnRequestItems ReturnRequestItem[]

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}
model ReturnRequest {
  id            String              @id @default(uuid())
  orderId       String
  reason        String
  status        ReturnRequestStatus @default(PENDING_APPROVAL)
  adminComments String?
  imageUrls     Json?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  order         Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  items         ReturnRequestItem[]
  comments      ReturnRequestComment[]

  @@index([orderId])
}
model ReturnRequestItem {
  id              String  @id @default(uuid())
  returnRequestId String
  orderItemId     String
  quantity        Int
  returnRequest   ReturnRequest @relation(fields: [returnRequestId], references: [id], onDelete: Cascade)
  orderItem       OrderItem     @relation(fields: [orderItemId], references: [id], onDelete: Restrict)

  @@unique([returnRequestId, orderItemId])
  @@index([orderItemId])
}
model ReturnRequestComment {
  id              String        @id @default(uuid())
  returnRequestId String
  authorId        String?
  authorName      String
  commentText     String?
  imageUrl        String?
  createdAt       DateTime      @default(now())
  returnRequest   ReturnRequest @relation(fields: [returnRequestId], references: [id], onDelete: Cascade)

  @@index([returnRequestId])
}