# docker-compose.prod.yml
version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    networks:
      - microservices-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc localhost 2181 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    networks:
      - microservices-network
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"  # Only expose what's needed for service communication
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"  # Disable auto-creation in production
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - kafka-data:/var/lib/kafka/data

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=strongElasticPassw0rd123!
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - es-data:/usr/share/elasticsearch/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s --fail -u elastic:strongElasticPassw0rd123! http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  consul:
    image: hashicorp/consul:1.18
    container_name: consul
    networks:
      - microservices-network
    volumes:
      - consul-data:/consul/data
    command: "agent -server -bootstrap-expect=1 -ui -client=0.0.0.0 -node=consul-node"
    healthcheck:
      test: ["CMD", "consul", "info"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  api-gateway:
    image: my-registry.example.com/api-gateway:latest  # Use a registry with versioned images
    container_name: api-gateway
    ports:
      - "3000:3000"
    networks:
      - microservices-network
    depends_on:
      consul:
        condition: service_healthy
    environment:
      PORT: 3000
      CONSUL_AGENT_HOST: consul
      SERVICE_NAME: api-gateway
      NODE_ENV: production
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  auth-service:
    image: my-registry.example.com/auth-service:latest  # Use a registry with versioned images
    container_name: auth-service
    networks:
      - microservices-network
    depends_on:
      auth-db:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      PORT: 3001
      DATABASE_URL: postgresql://postgres:Auth_DB_P@ssw0rd!@auth-db:5432/auth_db?schema=public
      JWT_SECRET: pR0duct!0n-JWT-s3cr3t-k3y-complex-and-secure
      CONSUL_AGENT_HOST: consul
      SERVICE_NAME: auth-service
      NODE_ENV: production
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  product-service:
    image: my-registry.example.com/product-service:latest  # Use a registry with versioned images
    container_name: product-service
    networks:
      - microservices-network
    depends_on:
      product-db:
        condition: service_healthy
      consul:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      PORT: 3003
      DATABASE_URL: postgresql://postgres:Product_DB_P@ssw0rd!@product-db:5432/product_db?schema=public
      CONSUL_AGENT_HOST: consul
      SERVICE_NAME: product-service
      KAFKA_BROKERS: kafka:9092
      NODE_ENV: production
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  image-service:
    image: my-registry.example.com/image-service:latest  # Use a registry with versioned images
    container_name: image-service
    networks:
      - microservices-network
    depends_on:
      consul:
        condition: service_healthy
    volumes:
      - image-uploads-data:/app/uploads
    environment:
      PORT: 3004
      CONSUL_AGENT_HOST: consul
      SERVICE_NAME: image-service
      NODE_ENV: production
      UPLOAD_DIR: /app/uploads
      IMAGE_BASE_URL: https://api.example.com/images  # Adjust to your production domain
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  search-service:
    image: my-registry.example.com/search-service:latest  # Use a registry with versioned images
    container_name: search-service
    networks:
      - microservices-network
    depends_on:
      consul:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      PORT: 3005
      CONSUL_AGENT_HOST: consul
      SERVICE_NAME: search-service
      KAFKA_BROKERS: kafka:9092
      ELASTICSEARCH_NODE: http://elastic:strongElasticPassw0rd123!@elasticsearch:9200
      NODE_ENV: production
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  auth-db:
    image: postgres:15-alpine
    container_name: auth-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Auth_DB_P@ssw0rd!
      POSTGRES_DB: auth_db
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d auth_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  product-db:
    image: postgres:15-alpine
    container_name: product-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Product_DB_P@ssw0rd!
      POSTGRES_DB: product_db
    volumes:
      - product-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d product_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

networks:
  microservices-network:
    driver: bridge

volumes:
  auth-db-data:
  product-db-data:
  es-data:
  image-uploads-data:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
  consul-data: