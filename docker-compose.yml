services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper-dev
    networks:
      - microservices-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka-dev
    networks:
      - microservices-network
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-dev:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-dev:9092,EXTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/kafka-topics --bootstrap-server kafka-dev:9092 --list || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5

  elasticsearch: # <<< MODIFIED SECTION
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: elasticsearch-dev
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # Keep security disabled for dev simplicity
      - ES_JAVA_OPTS=-Xms512m -Xmx512m # Keep memory settings
      # Optional: Setting network.host explicitly might help in some Docker envs, but usually not needed with single-node
      # - network.host=0.0.0.0
    ulimits: # Keep ulimits unless they specifically cause OS issues
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data-dev:/usr/share/elasticsearch/data # Correct named volume
    ports:
      - "9200:9200" # Correct port mapping
    networks:
      - microservices-network # Correct network
    healthcheck:
      # Increased tolerance: more time for curl, longer interval, more retries, start_period added
      test: ["CMD-SHELL", "curl -s --fail http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=10s || exit 1"]
      interval: 15s    # Check less frequently during startup churn
      timeout: 12s     # Increased overall timeout for the check command
      retries: 6       # Allow one more retry
      start_period: 45s # IMPORTANT: Give ES 45 seconds grace period after starting before first healthcheck failure marks it unhealthy
                        # This helps significantly during docker compose watch restarts

  consul:
    image: hashicorp/consul:1.18
    container_name: consul-agent
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    networks:
      - microservices-network
    command: "agent -dev -client=0.0.0.0 -ui -node=consul-dev-node"
    healthcheck:
      test: ["CMD", "consul", "info"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: redis-dev
    ports:
      - "6379:6379"
    networks:
      - microservices-network
    volumes:
      - redis-data-dev:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  api-gateway:
    build:
      context: ./api-gateway
    container_name: api-gateway-dev
    ports:
      - "3000:3000"
    networks:
      - microservices-network
    depends_on:
      consul:
        condition: service_healthy
      auth-service:
        condition: service_started # Use started here as gateway does discovery
      product-service:
        condition: service_started
      image-service:
        condition: service_started
      search-service:
        condition: service_started # Wait for search to *start*, discovery handles availability
      cart-service:
        condition: service_started
    environment:
      PORT: 3000
      CONSUL_AGENT_HOST: consul-agent
      SERVICE_NAME: api-gateway
      NODE_ENV: development
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./api-gateway/src
          target: /app/src
        - action: rebuild
          path: ./api-gateway/package.json

  auth-service:
    build: ./auth-service
    container_name: auth-service-dev
    ports:
       - "3001:3001"
    depends_on:
      auth-db:
        condition: service_healthy
      consul:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres@auth-db:5432/auth_db?schema=public
      JWT_SECRET: your-secret-key-for-docker-dev
      CONSUL_AGENT_HOST: consul-agent
      SERVICE_NAME: auth-service
      NODE_ENV: development
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./auth-service/src
          target: /app/src
        - action: sync
          path: ./auth-service/prisma/schema.prisma
          target: /app/prisma/schema.prisma
        - action: rebuild
          path: ./auth-service/package.json

  product-service:
    build: ./product-service
    container_name: product-service-dev
    ports:
      - "3003:3003"
    depends_on:
      product-db:
        condition: service_healthy
      consul:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      PORT: 3003
      DATABASE_URL: postgresql://postgres:postgres@product-db:5432/product_db?schema=public
      CONSUL_AGENT_HOST: consul-agent
      SERVICE_NAME: product-service
      KAFKA_BROKERS: kafka-dev:9092
      NODE_ENV: development
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./product-service/src
          target: /app/src
        - action: sync
          path: ./product-service/prisma/schema.prisma
          target: /app/prisma/schema.prisma
        - action: rebuild
          path: ./product-service/package.json

  image-service:
    build: ./image-service
    container_name: image-service-dev
    ports:
      - "3004:3004"
    depends_on:
      consul:
        condition: service_healthy
    networks:
      - microservices-network
    volumes:
      - image-uploads-data:/app/uploads
    environment:
      PORT: 3004
      CONSUL_AGENT_HOST: consul-agent
      SERVICE_NAME: image-service
      NODE_ENV: development
      UPLOAD_DIR: /app/uploads
      IMAGE_BASE_URL: http://localhost:3004
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./image-service/src
          target: /app/src
        - action: rebuild
          path: ./image-service/package.json

  search-service:
    build: ./search-service
    container_name: search-service-dev
    ports:
      - "3005:3005"
    depends_on:
      consul:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch: # <<< Depends on ES being healthy
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      PORT: 3005
      CONSUL_AGENT_HOST: consul-agent
      SERVICE_NAME: search-service
      KAFKA_BROKERS: kafka-dev:9092
      ELASTICSEARCH_NODE: http://elasticsearch-dev:9200 # Correct internal hostname
      NODE_ENV: development
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./search-service/src
          target: /app/src
        - action: rebuild
          path: ./search-service/package.json

  cart-service:
    build: ./cart-service
    container_name: cart-service-dev
    ports:
      - "3006:3006"
    depends_on:
      consul:
        condition: service_healthy
      redis: # Depends on Redis being healthy
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      PORT: 3006
      CONSUL_AGENT_HOST: consul-agent
      SERVICE_NAME: cart-service
      NODE_ENV: development
      REDIS_HOST: redis-dev # Correct internal hostname
      REDIS_PORT: 6379
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./cart-service/src
          target: /app/src
        - action: rebuild
          path: ./cart-service/package.json

  order-service:
    build: ./order-service
    container_name: order-service-dev
    ports:
      - "3007:3007"
    depends_on:
      order-db:
        condition: service_healthy
      consul:
        condition: service_healthy
      product-service: # depends on product service to adjust stock
        condition: service_started
    networks:
      - microservices-network
    environment:
      PORT: 3007
      DATABASE_URL: postgresql://postgres:postgres@order-db:5432/order_db?schema=public
      CONSUL_AGENT_HOST: consul-agent
      SERVICE_NAME: order-service
      NODE_ENV: development
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./order-service/src
          target: /app/src
        - action: sync
          path: ./order-service/prisma/schema.prisma
          target: /app/prisma/schema.prisma
        - action: rebuild
          path: ./order-service/package.json

  auth-db:
    image: postgres:15-alpine
    container_name: auth-db
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth_db
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  product-db:
    image: postgres:15-alpine
    container_name: product-db
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: product_db
    volumes:
      - product-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d product_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-db:
    image: postgres:15-alpine
    container_name: order-db
    ports:
      - "5436:5432" # Use a new host port
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: order_db
    volumes:
      - order-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d order_db"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  microservices-network:
    driver: bridge

volumes:
  auth-db-data:
  es-data-dev:
  product-db-data:
  image-uploads-data:
  redis-data-dev:
  order-db-data: