# docker-compose.yml (Complete and Corrected)
version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2 # Use a stable version
    container_name: zookeeper-dev
    networks:
      - microservices-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.2 # Match Zookeeper version branch
    container_name: kafka-dev
    networks:
      - microservices-network
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      # Optional: Expose for external tools if needed, but not required for inter-service comms
      # "9092:9092"
      - "29092:29092" # Exposed for host access if absolutely needed (e.g., local dev tool)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-dev:2181'
      # Listeners: PLAINTEXT for internal Docker network, EXTERNAL for potential host access
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-dev:9092,EXTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # Dev setting
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0 # Dev setting
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1 # Dev setting
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1 # Dev setting
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 # Dev setting
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # Dev setting
      KAFKA_JMX_PORT: 9999 # Optional JMX
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" # Allow automatic topic creation for simplicity
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/kafka-topics --bootstrap-server kafka-dev:9092 --list || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1 # Use a specific recent version
    container_name: elasticsearch-dev
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # Disable security for simplicity (as requested)
      - ES_JAVA_OPTS=-Xms512m -Xmx512m # Adjust memory as needed
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data-dev:/usr/share/elasticsearch/data
    ports:
      - "9200:9200" # Expose ES API
      # - "9300:9300" # Transport - usually not needed externally
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s --fail http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  consul:
    image: hashicorp/consul:1.18
    container_name: consul-agent # Kept original name
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    networks:
      - microservices-network
    command: "agent -dev -client=0.0.0.0 -ui -node=consul-dev-node"
    healthcheck:
      test: ["CMD", "consul", "info"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build:
      context: ./api-gateway
    container_name: api-gateway-dev
    ports:
      - "3000:3000"
    networks:
      - microservices-network
    depends_on:
      consul:
        condition: service_healthy
      # Dependencies on services are less critical now due to discovery
      # but good for startup order logic
      auth-service:
        condition: service_started
      product-service: # <<< CHANGED from book-service
        condition: service_started
      image-service:   # <<< ADDED image-service dependency
        condition: service_started
      search-service:
        condition: service_started
    environment:
      PORT: 3000
      CONSUL_AGENT_HOST: consul-agent # Kept original name
      SERVICE_NAME: api-gateway     # <<< THIS LINE WAS ADDED
      NODE_ENV: development
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./api-gateway/src
          target: /app/src
        - action: rebuild
          path: ./api-gateway/package.json
        - action: rebuild
          path: ./api-gateway/package-lock.json

  auth-service:
    build: ./auth-service
    container_name: auth-service-dev
    ports: # Optional external exposure
       - "3001:3001"
    depends_on:
      auth-db: # Depends on auth-db (original name)
        condition: service_healthy
      consul:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres@auth-db:5432/auth_db?schema=public # Kept original DB name reference
      JWT_SECRET: your-secret-key-for-docker-dev # Kept original placeholder
      CONSUL_AGENT_HOST: consul-agent # Kept original name
      SERVICE_NAME: auth-service
      NODE_ENV: development
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./auth-service/src
          target: /app/src
        - action: sync
          path: ./auth-service/prisma/schema.prisma
          target: /app/prisma/schema.prisma
        - action: rebuild
          path: ./auth-service/package.json
        - action: rebuild
          path: ./auth-service/package-lock.json

  # --- book-service removed ---

  product-service: # <<< ADDED Product Service Definition
    build: ./product-service
    container_name: product-service-dev
    ports:
      - "3003:3003" # Assigning port 3003
    depends_on:
      product-db: # Depends on its own DB
        condition: service_healthy
      consul:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      PORT: 3003 # Port for product service
      DATABASE_URL: postgresql://postgres:postgres@product-db:5432/product_db?schema=public # Connect to product-db service
      CONSUL_AGENT_HOST: consul-agent # Connect to consul-agent
      SERVICE_NAME: product-service
      KAFKA_BROKERS: kafka-dev:9092 # Internal Kafka address
      NODE_ENV: development
      # IMAGE_SERVICE_BASE_URL: http://image-service-dev:3004 # Optional, uncomment if needed
    command: npm run dev # Assumes this runs migrations and starts
    develop: # Copied develop section pattern
      watch:
        - action: sync
          path: ./product-service/src
          target: /app/src
        - action: sync
          path: ./product-service/prisma/schema.prisma
          target: /app/prisma/schema.prisma
        - action: rebuild
          path: ./product-service/package.json
        - action: rebuild
          path: ./product-service/package-lock.json

  image-service: # <<< ADDED Image Service Definition
    build: ./image-service
    container_name: image-service-dev
    ports:
      - "3004:3004" # Assigning port 3004
    depends_on:
      consul:
        condition: service_healthy
    networks:
      - microservices-network
    volumes:
      - image-uploads-data:/app/uploads # Mount volume for uploads
    environment:
      PORT: 3004 # Port for image service
      CONSUL_AGENT_HOST: consul-agent # Connect to consul-agent
      SERVICE_NAME: image-service
      NODE_ENV: development
      UPLOAD_DIR: /app/uploads # Internal container path for uploads
      IMAGE_BASE_URL: http://localhost:3004 # External URL clients use (verify this is correct for your setup)
    command: npm run dev
    develop: # Copied develop section pattern
      watch:
        - action: sync
          path: ./image-service/src
          target: /app/src
        - action: rebuild
          path: ./image-service/package.json
        - action: rebuild
          path: ./image-service/package-lock.json

  search-service: # Definition mostly unchanged
    build: ./search-service
    container_name: search-service-dev
    ports:
      - "3005:3005" # <<< CHANGED Port mapping (was 3003)
    depends_on:
      consul:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      PORT: 3005 # <<< CHANGED Port variable (was 3003) - MUST CHANGE IN SERVICE CODE/CONFIG TOO
      CONSUL_AGENT_HOST: consul-agent # Kept original name
      SERVICE_NAME: search-service
      KAFKA_BROKERS: kafka-dev:9092 # Kept original name
      # Ensure search-service is configured to listen to 'product_events' topic
      ELASTICSEARCH_NODE: http://elasticsearch-dev:9200 # Kept original name
      NODE_ENV: development
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./search-service/src
          target: /app/src
        - action: rebuild
          path: ./search-service/package.json
        - action: rebuild
          path: ./search-service/package-lock.json

  auth-db:
    image: postgres:15-alpine
    container_name: auth-db # Kept original name
    ports:
      - "5434:5432" # Kept original mapping
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres # Kept original DEV ONLY password
      POSTGRES_DB: auth_db
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5


  product-db: # <<< ADDED Database for Product Service
    image: postgres:15-alpine
    container_name: product-db # Name used in product-service DATABASE_URL
    ports:
      - "5435:5432" # Assigning new host port 5435
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres # Kept original DEV ONLY password pattern
      POSTGRES_DB: product_db # DB name used in product-service DATABASE_URL
    volumes:
      - product-db-data:/var/lib/postgresql/data # New volume for product data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d product_db"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  microservices-network:
    driver: bridge

volumes:
  auth-db-data:
  es-data-dev:
  product-db-data:    # <<< Added
  image-uploads-data: # <<< Added