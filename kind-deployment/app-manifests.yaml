# =================================================================
# ISTIO GATEWAY & VIRTUAL SERVICE
# Defines the entry point and DIRECT routing for the mesh.
# =================================================================
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: lirmm-gateway
  namespace: lirmm-services
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: main-routing-vs
  namespace: lirmm-services
spec:
  hosts:
  - "*"
  gateways:
  - lirmm-gateway
  http:
  - match:
    - uri:
        prefix: /auth # Route /auth traffic...
    route:
    - destination:
        host: auth-service-svc # ...DIRECTLY to auth-service
        port:
          number: 3001
  - match:
    - uri:
        prefix: / # Route all other traffic...
    route:
    - destination:
        host: api-gateway-svc # ...to the api-gateway
        port:
          number: 3000
# =================================================================
# APPLICATION MANIFEST
# =================================================================
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-svc
  namespace: lirmm-services
spec:
  selector:
    app: api-gateway
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-deployment
  namespace: lirmm-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: ${IMAGE_PREFIX}/api-gateway:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        env:
        - name: PORT
          value: "3000"
        - name: SERVICE_NAME
          value: "api-gateway"
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service-svc
  namespace: lirmm-services
spec:
  selector:
    app: auth-service
  ports:
  - protocol: TCP
    port: 3001
    targetPort: 3001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service-deployment
  namespace: lirmm-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      initContainers:
      - name: auth-db-migrate
        image: ${IMAGE_PREFIX}/auth-service:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "npx prisma db push --schema=./prisma/schema.prisma --accept-data-loss"]
        env:
        - name: DATABASE_URL
          value: "postgresql://postgres:postgres@auth-db-svc:5432/auth_db?schema=public"
      containers:
      - name: auth-service
        image: ${IMAGE_PREFIX}/auth-service:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3001
        command: ["node", "src/index.js"]
        env:
        - name: PORT
          value: "3001"
        - name: DATABASE_URL
          value: "postgresql://postgres:postgres@auth-db-svc:5432/auth_db?schema=public"
        - name: JWT_SECRET
          value: "your-secret-key-for-docker-dev"
        - name: SERVICE_NAME
          value: "auth-service"```

