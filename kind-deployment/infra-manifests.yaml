# =================================================================
# INFRASTRUCTURE MANIFEST
# Contains all third-party and database services.
# Apply this file once using the Jenkinsfile-Infrastructure pipeline.
# =================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper-deployment
  labels:
    component: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      component: zookeeper
  template:
    metadata:
      labels:
        component: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.3.2
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 2181
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-svc
spec:
  selector:
    component: zookeeper
  ports:
  - protocol: TCP
    port: 2181
    targetPort: 2181
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-deployment
  labels:
    component: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      component: kafka
  template:
    metadata:
      labels:
        component: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.3.2
        imagePullPolicy: IfNotPresent
        ports:
        - name: internal
          containerPort: 9092
        - name: external
          containerPort: 29092
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper-svc:2181"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka-svc:9092,EXTERNAL://localhost:39092"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-svc
spec:
  selector:
    component: kafka
  ports:
  - name: internal
    protocol: TCP
    port: 9092
    targetPort: 9092
  - name: external
    protocol: TCP
    port: 29092
    targetPort: 29092
    nodePort: 30902
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch-deployment
  labels:
    component: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      component: elasticsearch
  template:
    metadata:
      labels:
        component: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        env:
        - name: discovery.type
          value: "single-node"
        - name: xpack.security.enabled
          value: "false"
        - name: ES_JAVA_OPTS
          value: "-Xms512m -Xmx512m"
        volumeMounts:
        - name: es-data
          mountPath: /usr/share/elasticsearch/data
      volumes:
      - name: es-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-svc
spec:
  selector:
    component: elasticsearch
  ports:
  - name: http
    protocol: TCP
    port: 9200
    targetPort: 9200
    nodePort: 32200
  - name: transport
    protocol: TCP
    port: 9300
    targetPort: 9300
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-deployment
  labels:
    component: consul
spec:
  replicas: 1
  selector:
    matchLabels:
      component: consul
  template:
    metadata:
      labels:
        component: consul
    spec:
      containers:
      - name: consul
        image: hashicorp/consul:1.18
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8500
        args:
          - "agent"
          - "-dev"
          - "-client=0.0.0.0"
          - "-ui"
          - "-node=consul-kind-node"
---
apiVersion: v1
kind: Service
metadata:
  name: consul-svc
spec:
  selector:
    component: consul
  ports:
  - name: http
    protocol: TCP
    port: 8500
    targetPort: 8500
    nodePort: 32500
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  labels:
    component: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      component: redis
  template:
    metadata:
      labels:
        component: redis
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 6379
        command: ["redis-server", "--appendonly", "yes"]
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis-svc
spec:
  selector:
    component: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
    nodePort: 32379
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-db-deployment
  labels:
    app: auth-db
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-db
  template:
    metadata:
      labels:
        app: auth-db
    spec:
      containers:
      - name: auth-db
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "auth_db"
        volumeMounts:
        - name: auth-db-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: auth-db-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: auth-db-svc
spec:
  selector:
    app: auth-db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-db-deployment
  labels:
    app: product-db
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: product-db
  template:
    metadata:
      labels:
        app: product-db
    spec:
      containers:
      - name: product-db
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "product_db"
        volumeMounts:
        - name: product-db-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: product-db-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: product-db-svc
spec:
  selector:
    app: product-db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-db-deployment
  labels:
    app: order-db
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-db
  template:
    metadata:
      labels:
        app: order-db
    spec:
      containers:
      - name: order-db
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "order_db"
        volumeMounts:
        - name: order-db-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: order-db-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: order-db-svc
spec:
  selector:
    app: order-db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: review-db-deployment
  labels:
    app: review-db
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: review-db
  template:
    metadata:
      labels:
        app: review-db
    spec:
      containers:
      - name: review-db
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "review_db"
        volumeMounts:
        - name: review-db-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: review-db-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: review-db-svc
spec:
  selector:
    app: review-db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432