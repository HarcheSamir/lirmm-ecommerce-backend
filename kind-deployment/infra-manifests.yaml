# =================================================================
# INFRASTRUCTURE MANIFEST (YOURS, ADAPTED FOR ISTIO)
# =================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper-deployment
  namespace: lirmm-services
  labels:
    component: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      component: zookeeper
  template:
    metadata:
      labels:
        component: zookeeper
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: zookeeper
        image: localhost:5000/confluentinc/cp-zookeeper:7.3.2
        imagePullPolicy: Always
        ports:
        - containerPort: 2181
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-svc
  namespace: lirmm-services
spec:
  selector:
    component: zookeeper
  ports:
  - protocol: TCP
    port: 2181
    targetPort: 2181
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-deployment
  namespace: lirmm-services
  labels:
    component: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      component: kafka
  template:
    metadata:
      labels:
        component: kafka
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: kafka
        image: localhost:5000/confluentinc/cp-kafka:7.3.2
        imagePullPolicy: Always
        ports:
        - name: internal
          containerPort: 9092
        - name: external
          containerPort: 29092
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper-svc:2181"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka-svc:9092,EXTERNAL://localhost:29092"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-svc
  namespace: lirmm-services
spec:
  selector:
    component: kafka
  ports:
  - name: internal
    protocol: TCP
    port: 9092
    targetPort: 9092
  - name: external
    protocol: TCP
    port: 29092
    targetPort: 29092
    nodePort: 30992
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch-deployment
  namespace: lirmm-services
  labels:
    component: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      component: elasticsearch
  template:
    metadata:
      labels:
        component: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: localhost:5000/docker.elastic.co/elasticsearch/elasticsearch:8.11.1
        imagePullPolicy: Always
        ports:
        - containerPort: 9200
        env:
        - name: discovery.type
          value: "single-node"
        - name: xpack.security.enabled
          value: "false"
        - name: xpack.security.http.ssl.enabled
          value: "false"
        - name: ES_JAVA_OPTS
          value: "-Xms512m -Xmx512m"
        readinessProbe:
          httpGet:
            path: /_cluster/health?wait_for_status=yellow&timeout=1s
            port: 9200
          initialDelaySeconds: 20 # Give ES time to start up before probing
          periodSeconds: 10
        volumeMounts:
        - name: es-data
          mountPath: /usr/share/elasticsearch/data
      volumes:
      - name: es-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-svc
  namespace: lirmm-services
spec:
  selector:
    component: elasticsearch
  ports:
  - name: http
    port: 9200
    targetPort: 9200
    nodePort: 32200
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: lirmm-services
  labels:
    component: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      component: redis
  template:
    metadata:
      labels:
        component: redis
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: redis
        image: localhost:5000/redis:7.2-alpine
        imagePullPolicy: Always
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis-svc
  namespace: lirmm-services
spec:
  selector:
    component: redis
  ports:
  - port: 6379
    targetPort: 6379
    nodePort: 32379
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-db-deployment
  namespace: lirmm-services
  labels:
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-db
  template:
    metadata:
      labels:
        app: auth-db
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: auth-db
        image: localhost:5000/postgres:15-alpine
        imagePullPolicy: Always
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "auth_db"
        volumeMounts:
        - name: auth-db-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: auth-db-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: auth-db-svc
  namespace: lirmm-services
spec:
  selector:
    app: auth-db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-db-deployment
  namespace: lirmm-services
  labels:
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: product-db
  template:
    metadata:
      labels:
        app: product-db
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: product-db
        image: localhost:5000/postgres:15-alpine
        imagePullPolicy: Always
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "product_db"
        volumeMounts:
        - name: product-db-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: product-db-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: product-db-svc
  namespace: lirmm-services
spec:
  selector:
    app: product-db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-db-deployment
  namespace: lirmm-services
  labels:
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-db
  template:
    metadata:
      labels:
        app: order-db
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: order-db
        image: localhost:5000/postgres:15-alpine
        imagePullPolicy: Always
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "order_db"
        volumeMounts:
        - name: order-db-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: order-db-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: order-db-svc
  namespace: lirmm-services
spec:
  selector:
    app: order-db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: review-db-deployment
  namespace: lirmm-services
  labels:
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: review-db
  template:
    metadata:
      labels:
        app: review-db
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: review-db
        image: localhost:5000/postgres:15-alpine
        imagePullPolicy: Always
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "review_db"
        volumeMounts:
        - name: review-db-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: review-db-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: review-db-svc
  namespace: lirmm-services
spec:
  selector:
    app: review-db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
---
# --- START: NEW STATS DATABASE ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stats-db-deployment
  namespace: lirmm-services
  labels:
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stats-db
  template:
    metadata:
      labels:
        app: stats-db
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: stats-db
        image: localhost:5000/postgres:15-alpine
        imagePullPolicy: Always
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "stats_db"
        volumeMounts:
        - name: stats-db-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: stats-db-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: stats-db-svc
  namespace: lirmm-services
spec:
  selector:
    app: stats-db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
    