# This manifest is now designed to be deployed into an Istio-enabled namespace.
# Services are changed from NodePort to ClusterIP, and an Istio Gateway/VirtualService is added.
# Your application Deployments remain unchanged.
#
# --- INFRASTRUCTURE DEPLOYMENTS (Unchanged) ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper-deployment
  labels:
    app: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.3.2
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 2181
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-svc
spec:
  selector:
    app: zookeeper
  ports:
  - protocol: TCP
    port: 2181
    targetPort: 2181
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-deployment
  labels:
    app: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.3.2
        imagePullPolicy: IfNotPresent
        ports:
        - name: internal
          containerPort: 9092
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper-svc:2181"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka-deployment.default.svc.cluster.local:9092,EXTERNAL://localhost:39092"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_DEFAULT_REPLICATION_FACTOR
          value: "1"
        # Other Kafka settings...
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-svc
spec:
  selector:
    app: kafka
  ports:
  - name: internal
    protocol: TCP
    port: 9092
    targetPort: 9092
  - name: external
    protocol: TCP
    port: 29092
    targetPort: 29092
    nodePort: 30902 # Mapped to 39092 in kind-config.yaml
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch-deployment
  labels:
    app: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 9200
        env:
        - name: discovery.type
          value: "single-node"
        - name: xpack.security.enabled
          value: "false"
        - name: ES_JAVA_OPTS
          value: "-Xms512m -Xmx512m"
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-svc
spec:
  selector:
    app: elasticsearch
  ports:
  - name: http
    protocol: TCP
    port: 9200
    targetPort: 9200
    nodePort: 32200 # Mapped to 19200 in kind-config.yaml
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-deployment
  labels:
    app: consul
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul
  template:
    metadata:
      labels:
        app: consul
    spec:
      containers:
      - name: consul
        image: hashicorp/consul:1.18
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8500
        args:
          - "agent"
          - "-dev"
          - "-client=0.0.0.0"
          - "-ui"
          - "-node=consul-kind-node"
---
apiVersion: v1
kind: Service
metadata:
  name: consul-svc
spec:
  selector:
    app: consul
  ports:
  - name: http
    protocol: TCP
    port: 8500
    targetPort: 8500
    nodePort: 32500 # Mapped to 18500 in kind-config.yaml
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 6379
        command: ["redis-server", "--appendonly", "yes"]
---
apiVersion: v1
kind: Service
metadata:
  name: redis-svc
spec:
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
    nodePort: 32379 # Mapped to 19379 in kind-config.yaml
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-db-deployment
  labels:
    app: auth-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-db
  template:
    metadata:
      labels:
        app: auth-db
    spec:
      containers:
      - name: auth-db
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "auth_db"
---
apiVersion: v1
kind: Service
metadata:
  name: auth-db-svc
spec:
  selector:
    app: auth-db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
    nodePort: 30434 # Mapped to 15434 in kind-config.yaml
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-db-deployment
  labels:
    app: product-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: product-db
  template:
    metadata:
      labels:
        app: product-db
    spec:
      containers:
      - name: product-db
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "product_db"
---
apiVersion: v1
kind: Service
metadata:
  name: product-db-svc
spec:
  selector:
    app: product-db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
    nodePort: 30435 # Mapped to 15435 in kind-config.yaml
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-db-deployment
  labels:
    app: order-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-db
  template:
    metadata:
      labels:
        app: order-db
    spec:
      containers:
      - name: order-db
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "order_db"
---
apiVersion: v1
kind: Service
metadata:
  name: order-db-svc
spec:
  selector:
    app: order-db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
    nodePort: 30436 # Mapped to 15436 in kind-config.yaml
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: review-db-deployment
  labels:
    app: review-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: review-db
  template:
    metadata:
      labels:
        app: review-db
    spec:
      containers:
      - name: review-db
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "review_db"
---
apiVersion: v1
kind: Service
metadata:
  name: review-db-svc
spec:
  selector:
    app: review-db
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
    nodePort: 30437 # Mapped to 15437 in kind-config.yaml
  type: NodePort
---
######################################################
### ISTIO GATEWAY CONFIG - SINGLE ENTRY POINT      ###
######################################################
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: ecommerce-gateway
spec:
  selector:
    istio: ingressgateway # use istio's default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*" # This gateway will handle all incoming HTTP traffic
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: api-gateway-vs
spec:
  hosts:
  - "*"
  gateways:
  - ecommerce-gateway
  http:
  # All traffic entering the gateway is routed to the api-gateway service
  # The api-gateway then proxies to other services internally via their ClusterIP names
  - route:
    - destination:
        host: api-gateway-svc
        port:
          number: 3000
---
######################################################
###                  MICROSERVICES                 ###
######################################################
# --- API Gateway ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-deployment
  labels:
    app: api-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: ${IMAGE_PREFIX}/api-gateway:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        env:
        - name: PORT
          value: "3000"
        - name: CONSUL_AGENT_HOST
          value: "consul-svc"
        - name: SERVICE_NAME
          value: "api-gateway"
        - name: NODE_ENV
          value: "development"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-svc
spec:
  selector:
    app: api-gateway
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
  type: ClusterIP
---
# --- Auth Service ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service-deployment
  labels:
    app: auth-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      initContainers:
      - name: auth-db-migrate
        image: ${IMAGE_PREFIX}/auth-service:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "echo '[Init Container auth-service] Pushing schema...' && npx prisma db push --schema=./prisma/schema.prisma --accept-data-loss && echo '[Init Container auth-service] Seeding DB...' && npx prisma db seed --schema=./prisma/schema.prisma && echo '[Init Container auth-service] DB setup complete.'"]
        env:
        - name: DATABASE_URL
          value: "postgresql://postgres:postgres@auth-db-svc:5432/auth_db?schema=public"
      containers:
      - name: auth-service
        image: ${IMAGE_PREFIX}/auth-service:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3001
        command: ["node", "src/index.js"]
        env:
        - name: PORT
          value: "3001"
        - name: DATABASE_URL
          value: "postgresql://postgres:postgres@auth-db-svc:5432/auth_db?schema=public"
        - name: JWT_SECRET
          value: "your-secret-key-for-docker-dev"
        - name: CONSUL_AGENT_HOST
          value: "consul-svc"
        - name: SERVICE_NAME
          value: "auth-service"
        - name: KAFKA_BROKERS
          value: "kafka-svc:9092"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service-svc
spec:
  selector:
    app: auth-service
  ports:
  - protocol: TCP
    port: 3001
    targetPort: 3001
  type: ClusterIP
---
# --- Product Service ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service-deployment
  labels:
    app: product-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
    spec:
      initContainers:
      - name: product-db-migrate
        image: ${IMAGE_PREFIX}/product-service:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "echo '[Init Container product-service] Pushing schema...' && npx prisma db push --schema=./prisma/schema.prisma --accept-data-loss && echo '[Init Container product-service] Seeding DB...' && npx prisma db seed --schema=./prisma/schema.prisma || echo '[Init Container product-service] WARNING: Seed command failed but continuing.'"]
        env:
        - name: DATABASE_URL
          value: "postgresql://postgres:postgres@product-db-svc:5432/product_db?schema=public"
      containers:
      - name: product-service
        image: ${IMAGE_PREFIX}/product-service:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3003
        command: ["node", "src/index.js"]
        env:
        - name: PORT
          value: "3003"
        - name: DATABASE_URL
          value: "postgresql://postgres:postgres@product-db-svc:5432/product_db?schema=public"
        - name: CONSUL_AGENT_HOST
          value: "consul-svc"
        - name: SERVICE_NAME
          value: "product-service"
        - name: KAFKA_BROKERS
          value: "kafka-svc:9092"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
---
apiVersion: v1
kind: Service
metadata:
  name: product-service-svc
spec:
  selector:
    app: product-service
  ports:
  - protocol: TCP
    port: 3003
    targetPort: 3003
  type: ClusterIP
---
# --- Image Service ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: image-service-deployment
  labels:
    app: image-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: image-service
  template:
    metadata:
      labels:
        app: image-service
    spec:
      containers:
      - name: image-service
        image: ${IMAGE_PREFIX}/image-service:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3004
        env:
        - name: PORT
          value: "3004"
        - name: CONSUL_AGENT_HOST
          value: "consul-svc"
        - name: SERVICE_NAME
          value: "image-service"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
---
apiVersion: v1
kind: Service
metadata:
  name: image-service-svc
spec:
  selector:
    app: image-service
  ports:
  - protocol: TCP
    port: 3004
    targetPort: 3004
  type: ClusterIP
---
# --- Search Service ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: search-service-deployment
  labels:
    app: search-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: search-service
  template:
    metadata:
      labels:
        app: search-service
    spec:
      containers:
      - name: search-service
        image: ${IMAGE_PREFIX}/search-service:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3005
        env:
        - name: PORT
          value: "3005"
        - name: CONSUL_AGENT_HOST
          value: "consul-svc"
        - name: SERVICE_NAME
          value: "search-service"
        - name: KAFKA_BROKERS
          value: "kafka-svc:9092"
        - name: ELASTICSEARCH_NODE
          value: "http://elasticsearch-svc:9200"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
---
apiVersion: v1
kind: Service
metadata:
  name: search-service-svc
spec:
  selector:
    app: search-service
  ports:
  - protocol: TCP
    port: 3005
    targetPort: 3005
  type: ClusterIP
---
# --- Cart Service ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cart-service-deployment
  labels:
    app: cart-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cart-service
  template:
    metadata:
      labels:
        app: cart-service
    spec:
      containers:
      - name: cart-service
        image: ${IMAGE_PREFIX}/cart-service:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3006
        env:
        - name: PORT
          value: "3006"
        - name: CONSUL_AGENT_HOST
          value: "consul-svc"
        - name: SERVICE_NAME
          value: "cart-service"
        - name: REDIS_HOST
          value: "redis-svc"
        - name: REDIS_PORT
          value: "6379"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
---
apiVersion: v1
kind: Service
metadata:
  name: cart-service-svc
spec:
  selector:
    app: cart-service
  ports:
  - protocol: TCP
    port: 3006
    targetPort: 3006
  type: ClusterIP
---
# --- Order Service ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service-deployment
  labels:
    app: order-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      initContainers:
      - name: order-db-migrate
        image: ${IMAGE_PREFIX}/order-service:${IMAGE_TAG}
        command: ["sh", "-c", "echo '[Init Container order-service] Pushing schema...' && npx prisma db push --schema=./prisma/schema.prisma --accept-data-loss && echo Done."]
        env:
        - name: DATABASE_URL
          value: "postgresql://postgres:postgres@order-db-svc:5432/order_db?schema=public"
      containers:
      - name: order-service
        image: ${IMAGE_PREFIX}/order-service:${IMAGE_TAG}
        ports:
        - containerPort: 3007
        env:
        - name: PORT
          value: "3007"
        - name: DATABASE_URL
          value: "postgresql://postgres:postgres@order-db-svc:5432/order_db?schema=public"
        - name: CONSUL_AGENT_HOST
          value: "consul-svc"
        - name: SERVICE_NAME
          value: "order-service"
        - name: KAFKA_BROKERS
          value: "kafka-svc:9092"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
---
apiVersion: v1
kind: Service
metadata:
  name: order-service-svc
spec:
  selector:
    app: order-service
  ports:
  - protocol: TCP
    port: 3007
    targetPort: 3007
  type: ClusterIP
---
# --- Review Service ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: review-service-deployment
  labels:
    app: review-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: review-service
  template:
    metadata:
      labels:
        app: review-service
    spec:
      initContainers:
      - name: review-db-migrate
        image: ${IMAGE_PREFIX}/review-service:${IMAGE_TAG}
        command: ["sh", "-c", "echo '[Init Container review-service] Pushing schema...' && npx prisma db push --schema=./prisma/schema.prisma --accept-data-loss && echo Done."]
        env:
        - name: DATABASE_URL
          value: "postgresql://postgres:postgres@review-db-svc:5432/review_db?schema=public"
      containers:
      - name: review-service
        image: ${IMAGE_PREFIX}/review-service:${IMAGE_TAG}
        ports:
        - containerPort: 3008
        env:
        - name: PORT
          value: "3008"
        - name: DATABASE_URL
          value: "postgresql://postgres:postgres@review-db-svc:5432/review_db?schema=public"
        - name: CONSUL_AGENT_HOST
          value: "consul-svc"
        - name: SERVICE_NAME
          value: "review-service"
        - name: KAFKA_BROKERS
          value: "kafka-svc:9092"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
---
apiVersion: v1
kind: Service
metadata:
  name: review-service-svc
spec:
  selector:
    app: review-service
  ports:
  - protocol: TCP
    port: 3008
    targetPort: 3008
  type: ClusterIP