// This is the FINAL pipeline.
// It resets infrastructure AND refreshes the applications in a single run.
pipeline {
    agent { label 'wsl' }

    environment {
        ISTIO_BIN_DIR         = '/home/samir/istio-1.26.3/bin'
        APP_NAMESPACE       = 'lirmm-services'
        INFRA_MANIFEST_FILE = './kind-deployment/infra-manifests.yaml'
        //
        // KEY CHANGE: Added the application manifest file here
        //
        APP_MANIFEST_FILE   = './kind-deployment/app-manifests.yaml'
        KIND_CLUSTER_NAME   = "lirmm-dev-cluster"
    }

    stages {
        stage('Setup Kind Cluster and Istio') {
            steps {
                script {
                    def publicImages = [
                        'postgres:15-alpine',
                        'confluentinc/cp-zookeeper:7.3.2',
                        'confluentinc/cp-kafka:7.3.2',
                        'docker.elastic.co/elasticsearch/elasticsearch:8.11.1',
                        'redis:7.2-alpine'
                    ]
                    echo "--- Pulling heavy public images to the agent ---"
                    publicImages.each { image ->
                        sh "docker pull ${image}"
                    }
                    echo "--- Running the idempotent setup script ---"
                    withEnv(["PATH+EXTRA=${env.ISTIO_BIN_DIR}"]) {
                        sh "chmod +x ./kind-deployment/setup-kind.sh"
                        sh "./kind-deployment/setup-kind.sh"
                    }
                    echo "--- Loading images into Kind ---"
                    publicImages.each { image ->
                        sh "kind load docker-image ${image} --name ${env.KIND_CLUSTER_NAME}"
                    }
                }
            }
        }
        
        stage('Deploy & Refresh Infrastructure Services') {
            steps {
                script {
                    echo "--- Applying infrastructure manifests ---"
                    sh "kubectl apply -f ${env.INFRA_MANIFEST_FILE} -n ${env.APP_NAMESPACE}"
                    
                    echo "--- Restarting infrastructure to wipe data ---"
                    sh "kubectl rollout restart deployment -n ${env.APP_NAMESPACE} -l 'component in (zookeeper, kafka, elasticsearch, redis, database)'"

                    echo "--- Waiting for fresh infrastructure to become available ---"
                    sh "kubectl wait --for=condition=Available deployment -l component=database -n ${env.APP_NAMESPACE} --timeout=10m"
                    sh "kubectl wait --for=condition=Available deployment -l component=zookeeper -n ${env.APP_NAMESPACE} --timeout=5m"
                    sh "kubectl wait --for=condition=Available deployment -l component=kafka -n ${env.APP_NAMESPACE} --timeout=5m"
                    sh "kubectl wait --for=condition=Available deployment -l component=elasticsearch -n ${env.APP_NAMESPACE} --timeout=15m"
                    sh "kubectl wait --for=condition=Available deployment -l component=redis -n ${env.APP_NAMESPACE} --timeout=5m"
                }
            }
        }

        // =================================================================
        // KEY CHANGE: This new stage restarts the apps to run their initContainers
        // =================================================================
        stage('Refresh Application Services') {
            steps {
                script {
                    echo "--- Applying application manifests to ensure they exist ---"
                    sh "kubectl apply -f ${env.APP_MANIFEST_FILE} -n ${env.APP_NAMESPACE}"

                    echo "--- Restarting application services to run migrations/init ---"
                    sh "kubectl rollout restart deployment -n ${env.APP_NAMESPACE} -l app-type=microservice"
                    
                    echo "--- Waiting for all applications to become available ---"
                    sh "kubectl wait --for=condition=Available deployment -n ${env.APP_NAMESPACE} -l app-type=microservice --timeout=15m"
                }
            }
        }
    }
    post {
        success {
            echo "--- FULL SYSTEM REFRESH SUCCEEDED ---"
            echo "--- Access your fresh application at: http://localhost:13000 ---"
        }
        failure {
            echo "--- SYSTEM REFRESH FAILED ---"
        }
    }
}
