// Jenkinsfile-Infrastructure
// This pipeline sets up the infrastructure and populates a local registry, including Istio.
pipeline {
    agent { label 'wsl' }

    environment {
        ISTIO_BIN_DIR         = '/home/samir/istio-1.26.3/bin'
        APP_NAMESPACE         = 'lirmm-services'
        INFRA_MANIFEST_FILE   = './kind-deployment/infra-manifests.yaml'
        LOCAL_REGISTRY        = 'localhost:5001'
    }

    stages {
        stage('Push Infrastructure and Istio Images to Local Registry') {
            steps {
                script {
                    // This stage MUST run before the cluster setup that needs the images.
                    // Get the Istio version from the setup script to ensure they match.
                    def istioVersion = sh(returnStdout: true, script: "grep ISTIO_VERSION= ./kind-deployment/setup-kind.sh | cut -d '\"' -f 2").trim()
                    echo "--- Using Istio Version from script: ${istioVersion} ---"

                    // This list now includes the CORE ISTIO IMAGES.
                    def publicImages = [
                        // Infrastructure Images
                        'postgres:15-alpine',
                        'confluentinc/cp-zookeeper:7.3.2',
                        'confluentinc/cp-kafka:7.3.2',
                        'docker.elastic.co/elasticsearch/elasticsearch:8.11.1',
                        'redis:7.2-alpine',
                        // Istio Core Images - This is the critical fix.
                        "istio/pilot:${istioVersion}",
                        "istio/proxyv2:${istioVersion}"
                    ]

                    echo "--- Pulling, re-tagging, and pushing all required images to the local registry ---"
                    publicImages.each { image ->
                        // The local tag for Istio images needs a special format: localhost:5001/istio/pilot
                        def localImage = image.startsWith("istio/") ? "${env.LOCAL_REGISTRY}/${image}" : "${env.LOCAL_REGISTRY}/${image}"
                        echo "Processing: ${image} -> ${localImage}"
                        sh "docker pull ${image}"
                        sh "docker tag ${image} ${localImage}"
                        sh "docker push ${localImage}"
                    }
                }
            }
        }
        stage('Setup Kind Cluster and Istio') {
            steps {
                script {
                    echo "--- Running the main setup script to create the cluster and install Istio ---"
                    echo "This will now use the images pre-loaded into the local registry."
                    withEnv(["PATH+EXTRA=${env.ISTIO_BIN_DIR}"]) {
                        sh "chmod +x ./kind-deployment/setup-kind.sh"
                        sh "./kind-deployment/setup-kind.sh"
                    }
                }
            }
        }
        stage('Deploy Infrastructure Services') {
            steps {
                script {
                    echo "--- Ensuring namespace '${env.APP_NAMESPACE}' exists ---"
                    sh "kubectl create namespace ${env.APP_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -"
                    echo "--- Applying ALL infrastructure manifests ---"
                    sh "kubectl apply -f ${env.INFRA_MANIFEST_FILE} -n ${env.APP_NAMESPACE}"
                    echo "--- Waiting for infrastructure to become available ---"
                    sh "kubectl wait --for=condition=Available deployment -l component=zookeeper -n ${env.APP_NAMESPACE} --timeout=5m"
                    sh "kubectl wait --for=condition=Available deployment -l component=kafka -n ${env.APP_NAMESPACE} --timeout=5m"
                    sh "kubectl wait --for=condition=Available deployment -l component=elasticsearch -n ${env.APP_NAMESPACE} --timeout=15m"
                    sh "kubectl wait --for=condition=Available deployment -l component=redis -n ${env.APP_NAMESPACE} --timeout=5m"
                    sh "kubectl wait --for=condition=Available deployment -l component=database -n ${env.APP_NAMESPACE} --timeout=10m"
                }
            }
        }
    }
    post {
        success { echo "--- INFRASTRUCTURE DEPLOYMENT SUCCEEDED ---" }
        failure { echo "--- INFRASTRUCTURE DEPLOYMENT FAILED ---" }
    }
}