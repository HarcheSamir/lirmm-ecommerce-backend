// Jenkinsfile-Infrastructure (Complete and Corrected)
pipeline {
    agent { label 'wsl' }

    environment {
        // Use localhost:5000 as the prefix for the local registry
        REGISTRY_HOST         = 'localhost:5000'
        APP_NAMESPACE         = 'lirmm-services'
        INFRA_MANIFEST_FILE   = './kind-deployment/infra-manifests.yaml'
        KIND_CLUSTER_NAME     = "lirmm-dev-cluster"
        KIND_CONFIG_FILE      = "./kind-deployment/kind-cluster-config.yaml"
        KIND_SETUP_SCRIPT     = "./kind-deployment/setup-kind.sh"
        ISTIO_BIN_DIR         = '/home/samir/istio-1.26.3/bin' // Your original variable is correct.
        // Add all your infra images here to pre-pull and push them
        INFRA_IMAGES = """
            confluentinc/cp-zookeeper:7.3.2
            confluentinc/cp-kafka:7.3.2
            docker.elastic.co/elasticsearch/elasticsearch:8.11.1
            redis:7.2-alpine
            postgres:15-alpine
        """
    }

    parameters {
        choice(name: 'MODE', choices: ['BOOTSTRAP', 'RESET_DATA_ONLY'], description: 'BOOTSTRAP: First time ever. Creates cluster, pre-loads images, installs Istio & infra. RESET_DATA_ONLY: Super-fast data wipe for an existing cluster.')
    }

    stages {
        stage('Bootstrap Cluster and Infrastructure') {
            when { expression { params.MODE == 'BOOTSTRAP' } }
            steps {
                script {
                    echo "--- BOOTSTRAP MODE ---"
                    
                    // --- FIX #1: Corrected cluster check logic ---
                    // We check if the command FAILS (!= 0), which means the cluster does NOT exist.
                    if (sh(script: "kind get clusters | grep -q ${KIND_CLUSTER_NAME}", returnStatus: true) != 0) {
                        echo "Cluster '${KIND_CLUSTER_NAME}' not found. Creating a new one..."
                        sh "kind create cluster --name ${KIND_CLUSTER_NAME} --config ${KIND_CONFIG_FILE}"
                        
                        echo "Connecting local registry to Kind network..."
                        // Adding a small sleep to ensure the network is ready, just in case.
                        sleep(5) 
                        sh 'docker network connect "kind" "kind-registry" || echo "Registry already connected or network not ready, continuing..."'
                    } else {
                        echo "Cluster '${KIND_CLUSTER_NAME}' already exists. Skipping cluster creation."
                    }

                    echo "Pre-pulling and pushing infra images to local registry for speed..."
                    def images = INFRA_IMAGES.trim().split('\\s+')
                    images.each { imageName ->
                        echo "Processing image: ${imageName}"
                        sh """
                            docker pull ${imageName}
                            docker tag ${imageName} ${REGISTRY_HOST}/${imageName}
                            docker push ${REGISTRY_HOST}/${imageName}
                        """
                    }

                    // --- FIX #2: Add ISTIO_BIN_DIR to the PATH ---
                    // This withEnv block makes `istioctl` available to any `sh` command inside it.
                    withEnv(["PATH+ISTIO=${env.ISTIO_BIN_DIR}"]) {
                        echo "Running setup script for Istio and addons (istioctl is now in PATH)..."
                        sh "chmod +x ${KIND_SETUP_SCRIPT}"
                        sh "${KIND_SETUP_SCRIPT}"
                    }
                    
                    echo "Deploying infrastructure services (Databases, Kafka, Redis, ES)..."
                    sh "kubectl apply -f ${INFRA_MANIFEST_FILE}"

                    echo "Waiting for all infrastructure to be ready..."
                    sh "kubectl wait --for=condition=available deployment -n ${APP_NAMESPACE} --all --timeout=15m"
                }
            }
        }

        stage('Reset Data Only (Fast)') {
            when { expression { params.MODE == 'RESET_DATA_ONLY' } }
            steps {
                script {
                    echo "--- RESET DATA ONLY MODE ---"
                    echo "Deleting all stateful service pods to wipe data (this is fast)..."
                    // This is the magic. Deleting pods with emptyDir volumes resets their state.
                    sh "kubectl delete pods -n ${APP_NAMESPACE} -l component=zookeeper --ignore-not-found=true"
                    sh "kubectl delete pods -n ${APP_NAMESPACE} -l component=kafka --ignore-not-found=true"
                    sh "kubectl delete pods -n ${APP_NAMESPACE} -l component=elasticsearch --ignore-not-found=true"
                    sh "kubectl delete pods -n ${APP_NAMESPACE} -l component=redis --ignore-not-found=true"
                    sh "kubectl delete pods -n ${APP_NAMESPACE} -l component=database --ignore-not-found=true"
                    
                    echo "Waiting for infrastructure to come back online..."
                    sh "kubectl wait --for=condition=available deployment -n ${APP_NAMESPACE} --all --timeout=10m"
                }
            }
        }
    }

    post {
        success {
            echo "INFRA PIPELINE SUCCEEDED. The system is ready for the application pipeline."
        }
        failure {
            error "INFRA PIPELINE FAILED."
        }
    }
}