// This is your original, working pipeline structure,
// with the one addition needed to refresh the infrastructure services.
pipeline {
    agent { label 'wsl' }

    environment {
        ISTIO_BIN_DIR         = '/home/samir/istio-1.26.3/bin'
        APP_NAMESPACE       = 'lirmm-services'
        INFRA_MANIFEST_FILE = './kind-deployment/infra-manifests.yaml'
        KIND_CLUSTER_NAME   = "lirmm-dev-cluster"
    }

    stages {
        stage('Setup Kind Cluster and Istio') {
            steps {
                script {
                    def publicImages = [
                        'postgres:15-alpine',
                        'confluentinc/cp-zookeeper:7.3.2',
                        'confluentinc/cp-kafka:7.3.2',
                        'docker.elastic.co/elasticsearch/elasticsearch:8.11.1',
                        'redis:7.2-alpine'
                    ]

                    echo "--- Pulling heavy public images to the agent ---"
                    publicImages.each { image ->
                        sh "docker pull ${image}"
                    }

                    echo "--- Running the main setup script to create the cluster and install Istio ---"
                    withEnv(["PATH+EXTRA=${env.ISTIO_BIN_DIR}"]) {
                        sh "chmod +x ./kind-deployment/setup-kind.sh"
                        sh "./kind-deployment/setup-kind.sh"
                    }

                    echo "--- Loading heavy images into Kind (YOUR ORIGINAL LOGIC) ---"
                    publicImages.each { image ->
                        echo "Loading: ${image}"
                        sh "kind load docker-image ${image} --name ${env.KIND_CLUSTER_NAME}"
                    }
                }
            }
        }
        //
        // KEY CHANGE: Added "Refresh" to the name and one 'sh' command to restart deployments.
        //
        stage('Deploy & Refresh Infrastructure Services') {
            steps {
                script {
                    echo "--- Ensuring namespace '${env.APP_NAMESPACE}' exists ---"
                    sh "kubectl create namespace ${env.APP_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -"

                    echo "--- Applying ALL infrastructure manifests ---"
                    sh "kubectl apply -f ${env.INFRA_MANIFEST_FILE} -n ${env.APP_NAMESPACE}"

                    echo "--- Forcing rollout restart to get a fresh data state ---"
                    sh "kubectl rollout restart deployment -n ${env.APP_NAMESPACE} -l 'component in (zookeeper, kafka, elasticsearch, redis, database)'"

                    echo "--- Waiting for infrastructure to become available (YOUR ORIGINAL LOGIC) ---"
                    sh "kubectl wait --for=condition=Available deployment -l component=zookeeper -n ${env.APP_NAMESPACE} --timeout=5m"
                    sh "kubectl wait --for=condition=Available deployment -l component=kafka -n ${env.APP_NAMESPACE} --timeout=5m"
                    sh "kubectl wait --for=condition=Available deployment -l component=elasticsearch -n ${env.APP_NAMESPACE} --timeout=15m"
                    sh "kubectl wait --for=condition=Available deployment -l component=redis -n ${env.APP_NAMESPACE} --timeout=5m"
                    sh "kubectl wait --for=condition=Available deployment -l component=database -n ${env.APP_NAMESPACE} --timeout=10m"
                }
            }
        }
    }
    post {
        success {
            echo "--- INFRASTRUCTURE DEPLOYMENT SUCCEEDED ---"
        }
    }
}