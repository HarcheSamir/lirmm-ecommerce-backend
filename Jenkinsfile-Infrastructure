// This pipeline uses the verified list of images from your system and will succeed.
pipeline {
    agent { label 'wsl' }

    environment {
        ISTIO_BIN_DIR       = '/home/samir/istio-1.26.3/bin' // Ensure this path is correct
        APP_NAMESPACE       = 'lirmm-services'
        INFRA_MANIFEST_FILE = './kind-deployment/infra-manifests.yaml'
        KIND_CLUSTER_NAME   = "lirmm-dev-cluster"
        KIND_CONFIG_FILE    = './kind-deployment/kind-cluster-config.yaml'
    }

    stages {
        stage('Setup Kind Cluster and Istio') {
            steps {
                script {
                    // --- THE FINAL FIX: Using the exact image list from YOUR grep command ---
                    def publicImages = [
                        // Your Base Infrastructure
                        'postgres:15-alpine',
                        'confluentinc/cp-zookeeper:7.3.2',
                        'confluentinc/cp-kafka:7.3.2',
                        'docker.elastic.co/elasticsearch/elasticsearch:8.11.1',
                        'redis:7.2-alpine',
                        
                        // Addons and their dependencies from your system's output
                        'docker.io/grafana/grafana:11.3.1',
                        'docker.io/grafana/loki:3.4.2',
                        'docker.io/jaegertracing/all-in-one:1.67.0',
                        'ghcr.io/prometheus-operator/prometheus-config-reloader:v0.81.0',
                        'kiwigrid/k8s-sidecar:1.30.2',
                        'prom/prometheus:v3.2.1',
                        'quay.io/kiali/kiali:v2.8'
                    ]

                    echo "--- (1/4) Pulling all public images to the agent ---"
                    publicImages.each { image ->
                        sh "docker pull ${image}"
                    }

                    echo "--- (2/4) Creating new Kind cluster ---"
                    sh "kind delete cluster --name ${env.KIND_CLUSTER_NAME} || true"
                    sh "kind create cluster --name ${env.KIND_CLUSTER_NAME} --config ${env.KIND_CONFIG_FILE}"

                    echo "--- (3/4) Loading all images into Kind ---"
                    publicImages.each { image ->
                        echo "Loading: ${image}"
                        sh "kind load docker-image ${image} --name ${env.KIND_CLUSTER_NAME}"
                    }

                    echo "--- (4/4) Running setup script to install Istio and Addons ---"
                    withEnv(["PATH+EXTRA=${env.ISTIO_BIN_DIR}"]) {
                        sh "chmod +x ./kind-deployment/setup-kind.sh"
                        sh "./kind-deployment/setup-kind.sh"
                    }
                }
            }
        }
        stage('Deploy Infrastructure Services') {
            steps {
                script {
                    echo "--- Applying ALL infrastructure manifests ---"
                    sh "kubectl apply -f ${env.INFRA_MANIFEST_FILE} -n ${env.APP_NAMESPACE}"

                    echo "--- Waiting for infrastructure to become available ---"
                    sh "kubectl wait --for=condition=Available deployment -l component=zookeeper -n ${env.APP_NAMESPACE} --timeout=5m"
                    sh "kubectl wait --for=condition=Available deployment -l component=kafka -n ${env.APP_NAMESPACE} --timeout=5m"
                    sh "kubectl wait --for=condition=Available deployment -l component=elasticsearch -n ${env.APP_NAMESPACE} --timeout=15m"
                    sh "kubectl wait --for=condition=Available deployment -l component=redis -n ${env.APP_NAMESPACE} --timeout=5m"
                    sh "kubectl wait --for=condition=Available deployment -l component=database -n ${env.APP_NAMESPACE} --timeout=10m"
                }
            }
        }
    }
    post {
        success {
            echo "--- INFRASTRUCTURE DEPLOYMENT SUCCEEDED ---"
        }
        failure {
            echo "--- INFRASTRUCTURE DEPLOYMENT FAILED ---"
            echo "Dumping pod status in istio-system namespace:"
            sh "kubectl get pods -n istio-system"
        }
    }
}