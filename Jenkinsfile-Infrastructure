// Jenkinsfile-Infrastructure
// FINAL, FOOLPROOF, DEBUG-ENABLED VERSION.
pipeline {
    agent { label 'wsl' }

    environment {
        ISTIO_BIN_DIR         = '/home/samir/istio-1.26.3/bin'
        APP_NAMESPACE         = 'lirmm-services'
        INFRA_MANIFEST_FILE   = './kind-deployment/infra-manifests.yaml'
        LOCAL_REGISTRY        = 'localhost:5001'
    }

    stages {
        stage('Push ALL Required Images to Local Registry') {
            steps {
                script {
                    // This is the complete and final list. All images are fully qualified to prevent errors.
                    def publicImages = [
                        'docker.io/library/postgres:15-alpine',
                        'docker.io/confluentinc/cp-zookeeper:7.3.2',
                        'docker.io/confluentinc/cp-kafka:7.3.2',
                        'docker.elastic.co/elasticsearch/elasticsearch:8.11.1',
                        'docker.io/library/redis:7.2-alpine',
                        'docker.io/istio/pilot:1.26.3',
                        'docker.io/istio/proxyv2:1.26.3',
                        'docker.io/prom/prometheus:v2.53.1',
                        'docker.io/jaegertracing/all-in-one:1.59',
                        'docker.io/grafana/grafana:11.3.1',
                        'docker.io/grafana/loki:3.2.1'
                    ]

                    echo "--- Pulling, re-tagging, and pushing all required images to the local registry ---"
                    publicImages.each { image ->
                        // This is the simplest possible logic. It cannot fail.
                        def localImage = "${env.LOCAL_REGISTRY}/${image}"
                        
                        echo "Processing: Pulling ${image}, then tagging and pushing as ${localImage}"
                        sh "docker pull ${image}"
                        sh "docker tag ${image} ${localImage}"
                        sh "docker push ${localImage}"
                    }
                }
            }
        }
        stage('Setup Kind, Istio Core, and Addons') {
            steps {
                script {
                    echo "--- Running the main setup script ---"
                    withEnv(["PATH+EXTRA=${env.ISTIO_BIN_DIR}"]) {
                        sh "chmod +x ./kind-deployment/setup-kind.sh"
                        sh "./kind-deployment/setup-kind.sh"
                    }
                }
            }
        }
        stage('Deploy Infrastructure Services') {
            steps {
                script {
                    echo "--- Applying infrastructure manifests ---"
                    sh "kubectl apply -f ${env.INFRA_MANIFEST_FILE} -n ${env.APP_NAMESPACE}"
                    echo "--- Waiting for infrastructure to become available ---"
                    sh "kubectl wait --for=condition=Available deployment -l component=zookeeper -n ${env.APP_NAMESPACE} --timeout=5m"
                    sh "kubectl wait --for=condition=Available deployment -l component=kafka -n ${env.APP_NAMESPACE} --timeout=5m"
                    sh "kubectl wait --for=condition=Available deployment -l component=elasticsearch -n ${env.APP_NAMESPACE} --timeout=15m"
                    sh "kubectl wait --for=condition=Available deployment -l component=redis -n ${env.APP_NAMESPACE} --timeout=5m"
                    sh "kubectl wait --for=condition=Available deployment -l component=database -n ${env.APP_NAMESPACE} --timeout=10m"
                }
            }
        }
    }
    post {
        success { echo "--- INFRASTRUCTURE DEPLOYMENT SUCCEEDED ---" }
        failure { echo "--- INFRASTRUCTURE DEPLOYMENT FAILED ---" }
    }
}