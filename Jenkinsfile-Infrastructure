pipeline {
    agent { label 'wsl' } // Or your preferred Jenkins agent label

    environment {
        // Set your Istio bin directory if you installed it manually
        // If not, the setup script will download it.
        // PATH = "/path/to/your/istio/bin:$PATH"
        APP_NAMESPACE         = 'lirmm-services'
        INFRA_MANIFEST_FILE   = './kind-deployment/infra-manifests.yaml'
        KIND_CLUSTER_NAME     = "lirmm-dev-cluster"
        KIND_SETUP_SCRIPT     = "./kind-deployment/setup-kind.sh"
    }

    parameters {
        choice(name: 'MODE', choices: ['BOOTSTRAP_OR_REFRESH_ALL', 'RESET_DATA_ONLY'], description: 'Select run mode: BOOTSTRAP creates cluster+infra. RESET is a fast data wipe for existing cluster.')
    }

    stages {
        stage('1. Setup Cluster and Core Services') {
            steps {
                script {
                    // This script is idempotent. It creates the cluster and installs Istio ONLY if they don't exist.
                    // This will be slow on the first run, and very fast on subsequent runs.
                    sh "chmod +x ${KIND_SETUP_SCRIPT}"
                    sh "APP_NAMESPACE=${APP_NAMESPACE} KIND_CLUSTER_NAME=${KIND_CLUSTER_NAME} ${KIND_SETUP_SCRIPT}"
                }
            }
        }

        stage('2. Deploy/Reset Infrastructure Services') {
            steps {
                script {
                    if (params.MODE == 'BOOTSTRAP_OR_REFRESH_ALL') {
                        echo "MODE: BOOTSTRAP_OR_REFRESH_ALL. Applying all infrastructure manifests..."
                        // Using --force to handle immutable field changes if any, and ensuring a full reset.
                        sh "kubectl apply -f ${INFRA_MANIFEST_FILE} -n ${APP_NAMESPACE} --force"
                    } else { // RESET_DATA_ONLY
                        echo "MODE: RESET_DATA_ONLY. Performing fast reset of stateful components..."
                        // This is the FAST reset. We delete the pods, the deployment controller recreates them with fresh emptyDir volumes.
                        sh """
                           kubectl delete deployments -n ${APP_NAMESPACE} -l 'component in (database, zookeeper, kafka, elasticsearch, redis)' --ignore-not-found=true
                           echo "Waiting for old stateful pods to terminate..."
                           sleep 15
                           echo "Re-applying manifests to ensure Deployments are recreated correctly."
                           kubectl apply -f ${INFRA_MANIFEST_FILE} -n ${APP_NAMESPACE}
                        """
                    }

                    echo "Waiting for all infrastructure deployments to be ready..."
                    // This ensures the pipeline waits until Kafka, DBs, etc., are fully up before finishing.
                    sh "kubectl wait --for=condition=Available deployment -l 'component in (database, zookeeper, kafka, elasticsearch, redis)' -n ${APP_NAMESPACE} --timeout=10m"
                }
            }
        }
    }

    post {
        success {
            echo "INFRA PIPELINE SUCCEEDED. The system is ready for the application pipeline."
        }
        failure {
            echo "INFRA PIPELINE FAILED."
            // You can add notifications here (Slack, email, etc.)
        }
    }
}