// CORRECTED AND RESPECTS YOUR ENVIRONMENT
pipeline {
    agent { label 'wsl' }

    environment {
        // YOUR ORIGINAL, CORRECT ENVIRONMENT VARIABLES
        ISTIO_BIN_DIR         = '/home/samir/istio-1.26.3/bin'
        APP_NAMESPACE         = 'lirmm-services'
        INFRA_MANIFEST_FILE   = './kind-deployment/infra-manifests.yaml'
        KIND_CLUSTER_NAME     = "lirmm-dev-cluster"
        KIND_SETUP_SCRIPT     = "./kind-deployment/setup-kind.sh"
        // **FIX:** ADDING YOUR ISTIO TO THE PATH FOR THE SCRIPT TO FIND
        PATH                  = "${ISTIO_BIN_DIR}:${env.PATH}"
    }

    parameters {
        choice(name: 'MODE', choices: ['BOOTSTRAP_OR_REFRESH_ALL', 'RESET_DATA_ONLY'], description: 'Select run mode: BOOTSTRAP creates cluster+infra. RESET is a fast data wipe for existing cluster.')
    }

    stages {
        stage('1. Setup Cluster and Core Services') {
            steps {
                script {
                    sh "chmod +x ${KIND_SETUP_SCRIPT}"
                    // This now runs with your istioctl in the PATH
                    sh "APP_NAMESPACE=${APP_NAMESPACE} KIND_CLUSTER_NAME=${KIND_CLUSTER_NAME} ${KIND_SETUP_SCRIPT}"
                }
            }
        }

        stage('2. Deploy/Reset Infrastructure Services') {
            steps {
                script {
                    if (params.MODE == 'BOOTSTRAP_OR_REFRESH_ALL') {
                        echo "MODE: BOOTSTRAP_OR_REFRESH_ALL. Applying all infrastructure manifests..."
                        sh "kubectl apply -f ${INFRA_MANIFEST_FILE} -n ${APP_NAMESPACE}"
                    } else { // RESET_DATA_ONLY
                        echo "MODE: RESET_DATA_ONLY. Performing fast reset of stateful components..."
                        sh """
                           kubectl delete deployments -n ${APP_NAMESPACE} -l 'component in (database, zookeeper, kafka, elasticsearch, redis)' --ignore-not-found=true
                           echo "Waiting for old stateful pods to terminate..."
                           sleep 15
                           echo "Re-applying manifests to ensure Deployments are recreated correctly."
                           kubectl apply -f ${INFRA_MANIFEST_FILE} -n ${APP_NAMESPACE}
                        """
                    }
                    echo "Waiting for all infrastructure deployments to be ready..."
                    sh "kubectl wait --for=condition=Available deployment -l 'component in (database, zookeeper, kafka, elasticsearch, redis)' -n ${APP_NAMESPACE} --timeout=10m"
                }
            }
        }
    }

    post {
        success {
            echo "INFRA PIPELINE SUCCEEDED. The system is ready for the application pipeline."
        }
        failure {
            echo "INFRA PIPELINE FAILED."
        }
    }
}