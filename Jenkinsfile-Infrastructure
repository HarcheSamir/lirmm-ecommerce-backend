// Jenkinsfile-Infrastructure
pipeline {
    agent { label 'wsl' }

    environment {
        // Use localhost:5000 as the prefix for the local registry
        REGISTRY_HOST         = 'localhost:5000'
        APP_NAMESPACE         = 'lirmm-services'
        INFRA_MANIFEST_FILE   = './kind-deployment/infra-manifests.yaml'
        KIND_CLUSTER_NAME     = "lirmm-dev-cluster"
        KIND_CONFIG_FILE      = "./kind-deployment/kind-cluster-config.yaml"
        KIND_SETUP_SCRIPT     = "./kind-deployment/setup-kind.sh"
        // Add all your infra images here to pre-pull and push them
        INFRA_IMAGES = """
            confluentinc/cp-zookeeper:7.3.2
            confluentinc/cp-kafka:7.3.2
            docker.elastic.co/elasticsearch/elasticsearch:8.11.1
            redis:7.2-alpine
            postgres:15-alpine
        """
    }

    parameters {
        choice(name: 'MODE', choices: ['BOOTSTRAP', 'RESET_DATA_ONLY'], description: 'BOOTSTRAP: First time ever. Creates cluster, pre-loads images, installs Istio & infra. RESET_DATA_ONLY: Super-fast data wipe for an existing cluster.')
    }

    stages {
        stage('Bootstrap Cluster and Infrastructure') {
            when { expression { params.MODE == 'BOOTSTRAP' } }
            steps {
                script {
                    echo "--- BOOTSTRAP MODE ---"
                    
                    // Check if cluster exists to prevent error
                    if (sh(script: "kind get clusters | grep ${KIND_CLUSTER_NAME} || true", returnStatus: true) == 0) {
                        echo "Cluster '${KIND_CLUSTER_NAME}' already exists. If you want a full fresh start, delete it manually with 'kind delete cluster --name ${KIND_CLUSTER_NAME}' and run BOOTSTRAP again."
                        // Skipping cluster creation but will proceed with other steps to ensure idempotency
                    } else {
                        echo "Creating Kind cluster '${KIND_CLUSTER_NAME}'..."
                        sh "kind create cluster --name ${KIND_CLUSTER_NAME} --config ${KIND_CONFIG_FILE}"
                        
                        echo "Connecting local registry to Kind network..."
                        sh 'docker network connect "kind" "kind-registry"'
                    }

                    echo "Pre-pulling and pushing infra images to local registry for speed..."
                    def images = INFRA_IMAGES.trim().split('\\s+')
                    images.each { imageName ->
                        echo "Processing image: ${imageName}"
                        sh """
                            docker pull ${imageName}
                            docker tag ${imageName} ${REGISTRY_HOST}/${imageName}
                            docker push ${REGISTRY_HOST}/${imageName}
                        """
                    }

                    echo "Running setup script for Istio and addons..."
                    sh "chmod +x ${KIND_SETUP_SCRIPT}"
                    sh "${KIND_SETUP_SCRIPT}"
                    
                    echo "Deploying infrastructure services (Databases, Kafka, Redis, ES)..."
                    sh "kubectl apply -f ${INFRA_MANIFEST_FILE}"

                    echo "Waiting for all infrastructure to be ready..."
                    sh "kubectl wait --for=condition=available deployment -n ${APP_NAMESPACE} --all --timeout=15m"
                }
            }
        }

        stage('Reset Data Only (Fast)') {
            when { expression { params.MODE == 'RESET_DATA_ONLY' } }
            steps {
                script {
                    echo "--- RESET DATA ONLY MODE ---"
                    echo "Deleting all stateful service pods to wipe data (this is fast)..."
                    // This is the magic. Deleting pods with emptyDir volumes resets their state.
                    sh "kubectl delete pods -n ${APP_NAMESPACE} -l component=zookeeper"
                    sh "kubectl delete pods -n ${APP_NAMESPACE} -l component=kafka"
                    sh "kubectl delete pods -n ${APP_NAMESPACE} -l component=elasticsearch"
                    sh "kubectl delete pods -n ${APP_NAMESPACE} -l component=redis"
                    sh "kubectl delete pods -n ${APP_NAMESPACE} -l component=database"
                    
                    echo "Waiting for infrastructure to come back online..."
                    sh "kubectl wait --for=condition=available deployment -n ${APP_NAMESPACE} --all --timeout=10m"
                }
            }
        }
    }

    post {
        success {
            echo "INFRA PIPELINE SUCCEEDED. The system is ready for the application pipeline."
        }
        failure {
            error "INFRA PIPELINE FAILED."
        }
    }
}